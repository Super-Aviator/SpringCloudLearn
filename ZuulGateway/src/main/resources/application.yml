spring:
  application:
    name: microservice-zuulgateway

  #设置最大允许上传文件大小,用于测试文件上传
  servlet:
    multipart:
      max-file-size: 2000MB
      max-request-size: 2050MB

server:
  port: 60000

  #定义zuul处理过程中,有异常抛出时,转发到的默认路径
  error:
    path: /error

eureka:
  client:
    service-url:
      defaultZone: http://101.37.172.37:18080/eureka/,http://49.235.67.7:18080/eureka/ #配置注册中心的地址,包含两个地址
  instance:
#    instance-id: ${spring.cloud.client.ip}:${server.port} #自定义服务的instanceID
    instance-id: ${spring.application.name}:${server.port} #自定义服务的instanceID

logging:
  level:
#    root: debug
    com.nestflix: DEBUG #开启netflix包的Debug日志，用于查看zuul的路由转发详情

#开放actuator端点
management:
  endpoints:
    web:
      exposure:
        include: health,info,routes,filters #开启actuator的routes,filters端点

zuul:
  retryable: true #是否全局开启、关闭zuul中的Ribbon重试

  #设置zuul文件上传前缀,当需要上传大文件(1MB以上)的文件时,需要在路径最前加上/zuul(在prefix前面)
  servlet-path: /zuul

  #路由前缀
  prefix: /api #为路由增加前缀,注意,前面的/不能忘,否则网关会抛异常
  strip-prefix: true #在后端接收到该url中时,是否删除掉前缀,如果为false,则在网关里会把前缀与路径进行拼接,然后进行访问:/api/springbootlearn/user---->api/user


  #关闭zuul自动路由配置,自动配置的路径为: http://host:port/{serviceId}/**,,可以访问/actuator/routes端点查看路由列表
  #    ignored-services: '*' # 关闭所有服务的自动路由配置,包括actuator的端点，更加安全，不会暴露不必要的service，注意：* 他喵的必须是字符串类型
  ignored-services: microservice-feignconsumer,microservice-eurekaserver # 关闭某个微服务的自动路由配置

  #屏蔽指定正则的路径
  ignored-patterns: /**/teacher/** #屏蔽路径中含有teacher的请求

  #路由配置
  routes:
    #方式一(不推荐)
    #使用path和url结合的方式配置路由,注意这种配置方式不会有短路和负载均衡的功能，要避免使用
    #    api1: #路由名称
    #      path: /api1/** #路由路径
    #      url: MICROSERVICE-EUREKACLIENT #服务的serviceID

    #方式二(推荐)
    #使用path和serviceID结合的方式.
#    springbootlearn-api:
#      path: /springbootlearn/**
#      serviceID: MICROSERVICE-SPRINGBOOTLEARN

    #方式三
    #使用zuul.routes.{serviceID}=path的方式配置路由
    #值得注意的时，在这里配合的路由不会覆盖zuul的自动路由配置，自动路由配置只能通过ignored-services去关闭
#    microservice-eurekaclient: /client/**
#    microservice-springbootlearn: /springbootlearn/**

    #方式四
    #{serviceID}:
    # path: /client/**
    # sensitive-headers: Cookies,Set-Cookies,Authorization #开启某个服务的局部头部过滤，客户请求之后，该头部会被过滤
    microservice-springbootlearn:
      path: /springbootlearn/**  #服务的路由配置
      retryable: false #是否开启重试

    #配置zuul本地跳转,对于/path/**开始的路径,都会跳转到本地的/forward/**
    forward-route:
      path: /path/**
      url: forward:/forward-path #注意:此路径只能时zuul所在项目中的Controller映射的路径,不能时其他微服务组件的路径

  #设置过滤头部(过滤传递给下游的request以及下游服务返回的response)
  ignored-headers: keep-alive #过滤传递给下游的request以及下游服务返回的response
  #设置敏感头部(过滤传递给下游的request)sensitive-headers会被添加到ignored-headers中
  sensitive-headers: Cookies,Set-Cookies,Authorization #过滤向下游传递的request中的头部,开启全局的头部过滤，客户请求之后，该头部会被过滤
  #设置是否保留下游的response中的security头部(默认时过滤掉的),包括:pragma,Cache-Cont ol,X-Frame Options,X Content-Type-Options,X-XSS-Protection,Expires
  ignore-security-headers: false
  #注意:对于头部过滤:ignoredHeaders = ignoredHeaders + sensitiveHeaders + securityHeaders(security是否在classpath路径中)

  #  add-host-header: true #增加登陆成功后的跳转头部，使得通过网关跳转

  PostHandlerFilter:
    pre:
      disable: true #通过配置文件,关闭PostHandlerFilter过滤器

ribbon:
  ConnectTimeout: 3000
  ReadTimeout: 20000

hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 6000 #设置断路器的超时时间默认为1000毫秒